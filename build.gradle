plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'org.ownjoo'
version = '0.0.1'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'

	testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

// ########################################################################################################
// standard stuff above, custom stuff to deal with react app below.
// ########################################################################################################
// Custom stuff is to copy the output of the front-end build output into the static folders
// so springboot can host it as static content with default springboot-web config
/* TODO: I think there's a way to make this simpler.  Perhaps something with processResources()?
*   processResources.doLast() does not work.  processResources.doFirst() copies static files
*   but into the wrong place.
*/

// defining a task that will copy the output of the npm install into the right locations for builds
task copyStatic(type: Copy){
	dependsOn('processResources')
	from 'front-end/build'
	into 'build/resources/main/public'
}

// if we call this main script's 'clean' task, it'll first call the front-end's 'clean' task
clean.dependsOn('front-end:clean')

// when this script runs, it'll first call the 'bundle' custom task in the 'front-end' script
processResources.dependsOn('front-end:bundle')

// makes the packaging tasks copy static files first
bootRun.dependsOn(copyStatic)
bootJar.dependsOn(copyStatic)
